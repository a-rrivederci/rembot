#!/usr/bin/python3
# -*- coding: utf-8 -*-

"""
Testing remote control of the rembot
License is available in LICENSE
since: 2018-MAR-05
"""
import serial.tools.list_ports
import re
import io
import os
import sys
import datetime
from time import sleep
import logging
from math import floor, ceil
import cv2 as cv
import numpy as np
import __version__
from arduino import Arduino
from gcode_generator import GCode, Generator

DEBUG = 1 # True

ROOT_LOGGER = logging.getLogger("rembot")
ROOT_LOGGER.setLevel(level=logging.INFO)
LOG_HANDLER = logging.StreamHandler()
LOG_FORMATTER = logging.Formatter(
    fmt='%(asctime)s [%(name)s](%(levelname)s) %(message)s',
    datefmt='%H:%M:%S')
LOG_HANDLER.setFormatter(LOG_FORMATTER)
ROOT_LOGGER.addHandler(LOG_HANDLER)

PY_LOGGER = logging.getLogger("rembot.gcode_test")
MCU_LOGGER = logging.getLogger("rembot.arduino")

def main():
    # Get likely arduino connection
    seq = re.compile(r'COM[0-9]')
    ports = list(serial.tools.list_ports.comports())
    if ports == []:
        PY_LOGGER.warning("No ports found")
        return # exit if no connection
    for portString in ports:
        # If uno is found in string
        if 'Arduino Uno' in str(portString):
            # Find out com port and connect
            port = seq.match(str(portString)).group()
            arduino = Arduino("gcode_test", port)
            PY_LOGGER.info("Connected to Arduino")

    PY_LOGGER.info("Beginning test")
    
    # Generate image
    '''
    255, 255, 255, 255
    255, 0,   0,   255
    255, 0,   0,   255
    255, 255, 255, 255
    '''
    TEST_DIMENSIONS = 4

    IMG = np.zeros((TEST_DIMENSIONS, TEST_DIMENSIONS), dtype=np.uint8)
    IMG[0][:] = 255
    IMG[3][:] = 255
    IMG[:][0] = 255
    IMG[:][3] = 255

    # Setup GCODE Parametes
    x_offset      = 0
    y_offset      = 0
    width, height = IMG.shape
    image_h       =  float(10)
    pixel_size    =  image_h / ( float(width) - 1.0 )
    image_w       =  pixel_size * ( float(height) - 1.0 )
    safe_z        =  float(0)
    split_step    =  float(1)
    pixel_step    =  max(1, int(floor( float(1.1) / pixel_size)))

    pre_script = ";Generated by Rembot v%s\n;Created %s\n;START" \
    %(__version__.__version__, datetime.datetime.now().isoformat())
    post_script = ";END"
    
    # Setup generator
    GCODE = Generator(
        IMG,
        pixel_size,
        pixel_step,
        split_step,
        safe_z,
        pre_script,
        post_script,
        x_offset,
        y_offset
    )

    codes = GCODE.generate()

    assets_path = os.path.join( os.path.dirname(os.path.abspath(sys.argv[0])), "assets" )
    agent_code_file = os.path.join( assets_path, "rembot.acode" )
    out = open(agent_code_file, 'w')
    for code in codes:
        out.write(code)
    out.close()
    
    # for cmd in codes:
    #     while(1):
    #         _m = arduino.read_str_data()
    #         if _m == '>':
    #             break
    #         else:
    #             MCU_LOGGER.info(_m)
    #     if DEBUG:
    #         PY_LOGGER.info("Sending {}".format(cmd))
        
    #     arduino.send_str_data(cmd)

    #     sleep(.1)
        
    #     while(arduino.read_str_data() != 'S'):
    #         pass
    return

if __name__ == "__main__":
    main()
    sys.exit(0)